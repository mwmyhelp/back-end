<?php

namespace App\Exceptions;

use F9Web\ApiResponseHelpers;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use laravelApiHelpers\ResponseHelper;
use Nette\Schema\ValidationException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * Use API Response Helpers
     */
    use ApiResponseHelpers;
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        /** Change the default exception return **/
        if($this->isV1Route()){
            /**
             * The Returning for the v1 Api Routes
             */
            // Model Not Found Exception
            if($e instanceof ModelNotFoundException){
                return $this->respondNotFound("Object not found");
            }
            // Access Denied Http Exception
            if($e instanceof AccessDeniedHttpException || $e instanceof AuthorizationException){
                return $this->respondForbidden("You don't have the permission to get this resource");
            }
        }else{
            /**
             * Deprecated:
             * The Returning for another routes
             */
            /** Tratamento especial para Validações */
            if ($e instanceof ValidationException) {
                return ResponseHelper::erroValidacao($e->errors(), true, "err_val_campo");
            }
            /** Tratamento para rota não encontrada **/
            if($e instanceof NotFoundHttpException){
                return ResponseHelper::erroGeral(request()->url()." | A rota de API solicitada não foi encontrada.","gr02");
            }
            /** Tratamento para outros tipos de Erro **/
            if($e instanceof \Error){
                return ResponseHelper::exception($e,$e->getMessage());
            }
        }


        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    /**
     * Private Function to check if the current URL have a v1 string, so it's a v1 api route.
     */
    private function isV1Route(){
        // Check if Current URL contais 'v1' string
        if(strpos(request()->url(),'v1') !== false){
            return true;
        }
        return false;
    }

}
